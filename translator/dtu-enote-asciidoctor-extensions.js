/* Generated by Opal 0.11.99.dev */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $$12, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $klass = Opal.klass, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$==', '$include', '$protected', '$!', '$[]', '$has_role?', '$replace', '$raise', '$===', '$<<', '$to_a', '$divmod', '$-', '$+', '$zero?', '$attr_of', '$to_i', '$attr', '$each', '$find_by', '$level', '$!=', '$get_and_tally_counter_of', '$update', '$title?', '$alph', '$title=', '$id', '$id=', '$[]=', '$attributes', '$caption=', '$references', '$nil?', '$call', '$use_dsl', '$named', '$create_pass_block', '$register', '$block_macro', '$tree_processor', '$block', '$on_context', '$parse_content_as', '$process', '$split', '$chomp', '$source', '$merge', '$inject', '$has_key?', '$to_s', '$create_open_block', '$style=']);
  
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
  } else {
    nil
  };
  self.$include($$($nesting, 'Asciidoctor'));
  (function($base, $parent_nesting) {
    var self = $module($base, 'CoreExtensions');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Asciidoctor');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $parent_nesting) {
        var self = $module($base, 'AbstractBlock');

        var $nesting = [self].concat($parent_nesting), $AbstractBlock_find_by_internal$1;

        self.$protected((Opal.def(self, '$find_by_internal', $AbstractBlock_find_by_internal$1 = function $$find_by_internal(selector, result) {
          var $iter = $AbstractBlock_find_by_internal$1.$$p, block = $iter || nil, $a, $b, $c, $d, self = this, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil, verdict = nil, $case = nil;
          if (self.context == null) self.context = nil;
          if (self.style == null) self.style = nil;
          if (self.id == null) self.id = nil;

          if ($iter) $AbstractBlock_find_by_internal$1.$$p = null;
          
          
          if ($iter) $AbstractBlock_find_by_internal$1.$$p = null;;
          
          if (selector == null) {
            selector = $hash2([], {});
          };
          
          if (result == null) {
            result = [];
          };
          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (any_context = (context_selector = selector['$[]']("context"))['$!']())) ? $d : context_selector['$=='](self.context))) ? ($truthy($d = (style_selector = selector['$[]']("style"))['$!']()) ? $d : style_selector['$=='](self.style)) : $c)) ? ($truthy($c = (role_selector = selector['$[]']("role"))['$!']()) ? $c : self['$has_role?'](role_selector)) : $b)) ? ($truthy($b = (id_selector = selector['$[]']("id"))['$!']()) ? $b : id_selector['$=='](self.id)) : $a))) {
            if ($truthy(id_selector)) {
              
              result.$replace((function() {if ((block !== nil)) {
                
                if ($truthy(Opal.yield1(block, self))) {
                  return [self]
                } else {
                  return []
                };
              } else {
                return [self]
              }; return nil; })());
              return self.$raise($$$('::', 'StopIteration'));
            } else if ((block !== nil)) {
              if ($truthy((verdict = Opal.yield1(block, self)))) {
                return (function() {$case = verdict;
                if ("skip_children"['$===']($case)) {
                result['$<<'](self);
                return result;}
                else if ("skip"['$===']($case)) {return result}
                else {return result['$<<'](self)}})()
              } else {
                return nil
              }
            } else {
              return result['$<<'](self)
            }
          } else {
            return nil
          };
        }, $AbstractBlock_find_by_internal$1.$$arity = -1), nil) && 'find_by_internal')
      })($nesting[0], $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_alph$2;

    
    Opal.const_set($nesting[0], 'Alph', $range("A", "Z", false).$to_a());
    return (Opal.def(self, '$alph', $Numeric_alph$2 = function $$alph() {
      var $a, $b, $c, self = this, s = nil, q = nil, r = nil;

      
      $a = ["", self], (s = $a[0]), (q = $a[1]), $a;
      while ($truthy(true)) {
        
        
        $c = $rb_minus(q, 1).$divmod(26), $b = Opal.to_ary($c), (q = ($b[0] == null ? nil : $b[0])), (r = ($b[1] == null ? nil : $b[1])), $c;;
        s = $rb_plus($$($nesting, 'Alph')['$[]'](r), s);
        if ($truthy(q['$zero?']())) {
          break;};
      };
      return s;
    }, $Numeric_alph$2.$$arity = 0), nil) && 'alph';
  })($nesting[0], null, $nesting);
  $$($nesting, 'AbstractBlock').$include($$$($$$($$($nesting, 'CoreExtensions'), 'Asciidoctor'), 'AbstractBlock'));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'QuestionHintAnswerTreeprocessor');

    var $nesting = [self].concat($parent_nesting), $QuestionHintAnswerTreeprocessor_process$3, $QuestionHintAnswerTreeprocessor_get_and_tally_counter_of$9, $QuestionHintAnswerTreeprocessor_attr_of$10;

    
    
    Opal.def(self, '$process', $QuestionHintAnswerTreeprocessor_process$3 = function $$process(document) {
      var $$4, $$5, self = this, initial_chapter = nil, chapter_section_level = nil, counter = nil, seen = nil;

      
      initial_chapter = $send(self, 'attr_of', [document, "autoxref-chapter"], ($$4 = function(){var self = $$4.$$s || this;

      return 1}, $$4.$$s = self, $$4.$$arity = 0, $$4));
      chapter_section_level = document.$attr("qha-chaptersectlevel", 1).$to_i();
      counter = $hash2(["chapter", "section", "question"], {"chapter": initial_chapter, "section": 1, "question": 1});
      seen = false;
      $send(document.$find_by($hash2(["context"], {"context": "section"})), 'each', [], ($$5 = function(chapter){var self = $$5.$$s || this, $a, $$6, $$7, chap = nil;

      
        
        if (chapter == null) {
          chapter = nil;
        };
        if ($truthy(($truthy($a = seen['$!']()) ? $a : chapter.$level()['$=='](chapter_section_level)))) {
        } else {
          return nil;
        };
        seen = true;
        if ($truthy(chapter.$level()['$!='](chapter_section_level))) {
          chapter = document};
        chap = $send(self, 'attr_of', [chapter, "qha-chapter"], ($$6 = function(){var self = $$6.$$s || this;

        return self.$get_and_tally_counter_of("chapter", counter)}, $$6.$$s = self, $$6.$$arity = 0, $$6));
        counter.$update($hash2(["section", "question"], {"section": 1, "question": 1}));
        return $send(["question"], 'each', [], ($$7 = function(type){var self = $$7.$$s || this, $$8;

        
          
          if (type == null) {
            type = nil;
          };
          return $send(chapter.$find_by($hash2(["role"], {"role": type})), 'each', [], ($$8 = function(el){var self = $$8.$$s || this, replaced = nil, replaced_caption = nil, $writer = nil;

          
            
            if (el == null) {
              el = nil;
            };
            if ($truthy(el['$title?']())) {
              
              replaced = self.$get_and_tally_counter_of(type, counter).$alph();
              replaced_caption = $rb_plus(replaced, " ");
              
              $writer = [replaced];
              $send(el, 'title=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["id", (($writer = ["" + (chapter.$id()) + "_q" + (counter['$[]']("question"))]), $send(el, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
              $send(el.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = ["caption", replaced_caption];
              $send(el.$attributes(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [replaced_caption];
              $send(el, 'caption=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [el.$attributes()['$[]']("id"), replaced];
              $send(document.$references()['$[]']("ids"), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else {
              return nil
            };}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $$7.$$s = self, $$7.$$arity = 1, $$7));}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      return nil;
    }, $QuestionHintAnswerTreeprocessor_process$3.$$arity = 1);
    
    Opal.def(self, '$get_and_tally_counter_of', $QuestionHintAnswerTreeprocessor_get_and_tally_counter_of$9 = function $$get_and_tally_counter_of(type, counter) {
      var self = this, t = nil, $writer = nil;

      
      t = counter['$[]'](type);
      
      $writer = [type, $rb_plus(counter['$[]'](type), 1)];
      $send(counter, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return t;
    }, $QuestionHintAnswerTreeprocessor_get_and_tally_counter_of$9.$$arity = 2);
    return (Opal.def(self, '$attr_of', $QuestionHintAnswerTreeprocessor_attr_of$10 = function $$attr_of(target, key) {
      var $iter = $QuestionHintAnswerTreeprocessor_attr_of$10.$$p, default$ = $iter || nil, self = this;

      if ($iter) $QuestionHintAnswerTreeprocessor_attr_of$10.$$p = null;
      
      
      if ($iter) $QuestionHintAnswerTreeprocessor_attr_of$10.$$p = null;;
      try {
        return target.$attr(key, "none").$to_i()
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'NoMethodError')])) {
          try {
            if ($truthy(default$['$nil?']()['$!']())) {
              return default$.$call()
            } else {
              return 0
            }
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, $QuestionHintAnswerTreeprocessor_attr_of$10.$$arity = 2), nil) && 'attr_of';
  })($nesting[0], $$$($$($nesting, 'Extensions'), 'Treeprocessor'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'PodcastBlockMacro');

    var $nesting = [self].concat($parent_nesting), $PodcastBlockMacro_process$11;

    
    self.$use_dsl();
    self.$named("podcast");
    return (Opal.def(self, '$process', $PodcastBlockMacro_process$11 = function $$process(parent, target, attrs) {
      var self = this, html = nil;

      
      html = "" + "<div class=\"openblock podcast\">\n" + "<pre>" + (target) + "</pre>\n" + "</div>";
      return self.$create_pass_block(parent, html, attrs, $hash2(["subs"], {"subs": nil}));
    }, $PodcastBlockMacro_process$11.$$arity = 3), nil) && 'process';
  })($nesting[0], $$$($$($nesting, 'Extensions'), 'BlockMacroProcessor'), $nesting);
  return $send($$($nesting, 'Extensions'), 'register', ["qha"], ($$12 = function(){var self = $$12.$$s || this, $$13;

  
    self.$block_macro($$($nesting, 'PodcastBlockMacro'));
    self.$tree_processor($$($nesting, 'QuestionHintAnswerTreeprocessor'));
    return $send(["question", "hint", "answer"], 'each', [], ($$13 = function(el_type){var self = $$13.$$s || this, $$14;

    
      
      if (el_type == null) {
        el_type = nil;
      };
      return $send(self, 'block', [], ($$14 = function(){var self = $$14.$$s || this, $$15;

      
        self.$named(el_type);
        self.$on_context("literal");
        self.$parse_content_as("raw");
        return $send(self, 'process', [], ($$15 = function(parent, reader, attrs){var self = $$15.$$s || this, $$16, result_lines = nil, through_attrs = nil, content = nil, wrapper = nil, $writer = nil;

        
          
          if (parent == null) {
            parent = nil;
          };
          
          if (reader == null) {
            reader = nil;
          };
          
          if (attrs == null) {
            attrs = nil;
          };
          result_lines = reader.$source().$chomp().$split("\n");
          through_attrs = $send(["id", "role", "title"], 'inject', [$hash2([], {})], ($$16 = function(collector, key){var self = $$16.$$s || this, $writer = nil;

          
            
            if (collector == null) {
              collector = nil;
            };
            
            if (key == null) {
              key = nil;
            };
            if ($truthy(attrs['$has_key?'](key))) {
              
              $writer = [key, attrs['$[]'](key)];
              $send(collector, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return collector;}, $$16.$$s = self, $$16.$$arity = 2, $$16)).$merge($hash2(["role"], {"role": el_type.$to_s()}));
          content = result_lines;
          wrapper = self.$create_open_block(parent, content, through_attrs);
          
          $writer = [el_type.$to_s()];
          $send(wrapper, 'style=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [el_type.$to_s()['$[]'](0)];
          $send(wrapper, 'title=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return wrapper;}, $$15.$$s = self, $$15.$$arity = 3, $$15));}, $$14.$$s = self, $$14.$$arity = 0, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13));}, $$12.$$s = self, $$12.$$arity = 0, $$12));
})(Opal);
